/// <reference types="node" />
import type { OAuth2Namespace } from "@fastify/oauth2";
import type { AnyClient } from "@gadgetinc/api-client-core";
import type { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
declare module "fastify" {
    interface FastifyInstance {
        googleOAuth2: OAuth2Namespace;
    }
    interface FastifyReply {
        view: (page: string, data?: object) => Promise<string>;
    }
    interface FastifyRequest {
        gadgetAuth?: Partial<GadgetAuthOptions<any>>;
    }
}
export type Providers<UserInput> = {
    type: "google";
    clientId: string;
    clientSecret: string;
    transformUser?: (result: GoogleOAuthResult) => UserInput;
    scopes?: string[];
    signedInRoles?: string[];
};
/**
 * Options for the Gadget auth plugin
 * @property {Providers} providers The providers to use for authentication
 * @property {string[]} signedInRoles The roles to assign a session that is signed in
 * @property {AnyClient} api The Gadget API client to use for creating and updating users and sessions
 * @property {string} loginPath The path to redirect to when a route is protected and the user is not signed in. Defaults to `/login`.
 * @property {boolean} redirectToLogin Whether to redirect to the login path when a route is protected and the user is not signed in. Defaults to `false`.
 */
export type GadgetAuthOptions<UserInput> = {
    providers: Providers<UserInput>[];
    signedInRoles: string[];
    api: AnyClient;
    signInPath?: string;
    redirectToSignIn?: boolean;
};
type GoogleOAuthResult = {
    given_name: string;
    family_name: string;
    email: string;
    email_verified: string;
    name: string;
    picture: string;
    profile: string;
};
/**
 * Utility function to wrap route handlers with protection from unauthenticated requests.
 *
 * @param handler The route handler to protect
 * @param {ProtectedRouteOptions} options Options for the protected route
 * @returns handler function that is wrapped with route protection
 *
 * @example
 * ```ts
 * // routes/GET-protected-route.js
 * const { preValidation } = require("@gadgetinc/auth");
 *
 * module.exports = async ({ request, reply }) => {
 *  await reply.send("this is a protected route");
 * }
 *
 * module.options = {
 *  preValidation,
 * }
 * ```
 */
export declare const preValidation: <RouteContext extends FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("fastify").FastifyLoggerInstance>>(request: RouteContext, reply: FastifyReply) => Promise<void>;
interface BaseUserInput {
    email: string;
    firstName: string;
    lastName: string;
    googleImageUrl: string;
}
/**
 * Fastify auth plugin for Gadget apps. This plugin will register route handlers for the specified providers and handle creating/updating users and sessions.
 * @param {FastifyInstance} fastify instance of fastify server
 * @param {GadgetAuthOptions} options options for the auth plugin
 * @param {HookHandlerDoneFunction} done hook handler done function when plugin is registered
 *
 * @example
 * ```ts
 * import { Auth } from "@gadgetinc/auth";
 * import { Client } from "@gadget-client/my-app";
 *
 * const api = new Client({
 *  authenticationMode: {
 *   apiKey: "my-api-key",
 *  }
 * });
 *
 * export default function(server) {
 *  server.register(Auth, {
 *   signedInRoles: ["signed-in"],
 *   api,
 *   providers: [
 *    {
 *      type: "google",
 *      clientId: process.env.GOOGLE_CLIENT_ID,
 *      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
 *    }
 *   ],
 *  });
 * }
 * ```
 */
export declare const Auth: <UserInput extends BaseUserInput>(instance: FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>, opts: GadgetAuthOptions<UserInput>, done: (err?: Error) => void) => void;
export {};
