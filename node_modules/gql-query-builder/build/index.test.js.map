{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import DefaultAppSyncQueryAdapter from \"../src/adapters/DefaultAppSyncQueryAdapter\";\nimport * as queryBuilder from \"./\";\n\ndescribe(\"Query\", () => {\n  test(\"generates query\", () => {\n    const query = queryBuilder.query({\n      operation: \"thoughts\",\n      fields: [\"id\", \"name\", \"thought\"],\n    });\n\n    expect(query).toEqual({\n      query: `query  { thoughts  { id, name, thought } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query with alias\", () => {\n    const query = queryBuilder.query({\n      operation: {\n        name: \"thoughts\",\n        alias: \"myThoughts\",\n      },\n      fields: [\"id\", \"name\", \"thought\"],\n    });\n\n    expect(query).toEqual({\n      query: `query  { myThoughts: thoughts  { id, name, thought } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates queries with the same operation with different alias\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: {\n          name: \"thoughts\",\n          alias: \"myThoughts\",\n        },\n        fields: [\"id\", \"name\", \"thought\"],\n      },\n      {\n        operation: {\n          name: \"thoughts\",\n          alias: \"yourThoughts\",\n        },\n        fields: [\"id\", \"name\", \"thought\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { myThoughts: thoughts  { id, name, thought } yourThoughts: thoughts  { id, name, thought } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query when adapter argument is provided\", () => {\n    const query = queryBuilder.query(\n      {\n        operation: \"thoughts\",\n        fields: [\"id\", \"name\", \"thought\"],\n      },\n      DefaultAppSyncQueryAdapter\n    );\n\n    expect(query).toEqual({\n      query: `query Thoughts  { thoughts  { nodes { id, name, thought } } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query when adapter and alias arguments are provided\", () => {\n    const query = queryBuilder.query(\n      {\n        operation: {\n          name: \"thoughts\",\n          alias: \"myThoughts\",\n        },\n        fields: [\"id\", \"name\", \"thought\"],\n      },\n      DefaultAppSyncQueryAdapter\n    );\n\n    expect(query).toEqual({\n      query: `query Thoughts  { myThoughts: thoughts  { nodes { id, name, thought } } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generate query with undefined variables\", () => {\n    const query = queryBuilder.query({\n      operation: \"user\",\n      fields: [\"id\", \"name\", \"email\"],\n      variables: { id: { type: \"Int\" }, name: undefined },\n    });\n\n    expect(query).toEqual({\n      query: `query ($id: Int, $name: String) { user (id: $id, name: $name) { id, name, email } }`,\n      variables: { id: undefined, name: undefined },\n    });\n  });\n\n  test(\"generates query with variables\", () => {\n    const query = queryBuilder.query({\n      operation: \"thought\",\n      variables: { id: 1 },\n      fields: [\"id\", \"name\", \"thought\"],\n    });\n\n    expect(query).toEqual({\n      query: `query ($id: Int) { thought (id: $id) { id, name, thought } }`,\n      variables: { id: 1 },\n    });\n  });\n\n  test(\"generates query with sub fields selection\", () => {\n    const query = queryBuilder.query({\n      operation: \"orders\",\n      fields: [\n        \"id\",\n        \"amount\",\n        {\n          user: [\n            \"id\",\n            \"name\",\n            \"email\",\n            {\n              address: [\"city\", \"country\"],\n            },\n            {\n              account: [\"holder\"],\n            },\n          ],\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `query  { orders  { id, amount, user { id, name, email, address { city, country }, account { holder } } } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query with multiple sub fields selection in same object\", () => {\n    const query = queryBuilder.query({\n      operation: \"orders\",\n      fields: [\n        \"id\",\n        \"amount\",\n        {\n          user: [\n            \"id\",\n            \"name\",\n            \"email\",\n            {\n              address: [\"city\", \"country\"],\n              account: [\"holder\"],\n            },\n          ],\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `query  { orders  { id, amount, user { id, name, email, address { city, country }, account { holder } } } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query with required variables\", () => {\n    const query = queryBuilder.query({\n      operation: \"userLogin\",\n      variables: {\n        email: { value: \"jon.doe@example.com\", required: true },\n        password: { value: \"123456\", required: true },\n      },\n      fields: [\"userId\", \"token\"],\n    });\n\n    expect(query).toEqual({\n      query: `query ($email: String!, $password: String!) { userLogin (email: $email, password: $password) { userId, token } }`,\n      variables: { email: \"jon.doe@example.com\", password: \"123456\" },\n    });\n  });\n\n  test(\"generate query with array variable (array items are not nullable)\", () => {\n    const query = queryBuilder.query({\n      operation: \"search\",\n      variables: {\n        tags: { value: [\"a\", \"b\", \"c\"], list: [true], type: \"String\" },\n      },\n      fields: [\"id\", \"title\", \"content\", \"tag\"],\n    });\n\n    expect(query).toEqual({\n      query: `query ($tags: [String!]) { search (tags: $tags) { id, title, content, tag } }`,\n      variables: { tags: [\"a\", \"b\", \"c\"] },\n    });\n  });\n\n  test(\"generate query with array variable (array items are nullable)\", () => {\n    const query = queryBuilder.query({\n      operation: \"search\",\n      variables: {\n        tags: { value: [\"a\", \"b\", \"c\", null], list: true },\n      },\n      fields: [\"id\", \"title\", \"content\", \"tag\"],\n    });\n\n    expect(query).toEqual({\n      query: `query ($tags: [String]) { search (tags: $tags) { id, title, content, tag } }`,\n      variables: { tags: [\"a\", \"b\", \"c\", null] },\n    });\n  });\n\n  test(\"generates multiple queries\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"thoughts\",\n        fields: [\"id\", \"name\", \"thought\"],\n      },\n      {\n        operation: \"prayers\",\n        fields: [\"id\", \"name\", \"prayer\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { thoughts  { id, name, thought } prayers  { id, name, prayer } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query with variables nested in fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getPublicationNames\",\n        fields: [\n          {\n            operation: \"publication\",\n            variables: { id: { value: 12, type: \"ID\" } },\n            fields: [\"id\", \"name\"],\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($id: ID) { getPublicationNames  { publication (id: $id) { id, name } } }`,\n      variables: { id: 12 },\n    });\n  });\n\n  test(\"generates query with nested variables in nested fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getPublicationNames\",\n        fields: [\n          {\n            operation: \"publication\",\n            variables: { id: { value: 12, type: \"ID\" } },\n            fields: [\n              \"id\",\n              \"name\",\n              {\n                operation: \"platforms\",\n                variables: {\n                  visible: { type: \"Boolean\", value: true },\n                  platformLimit: { name: \"limit\", value: 999, type: \"Int\" },\n                },\n                fields: [\n                  \"totalCount\",\n                  {\n                    edges: [\n                      \"label\",\n                      \"code\",\n                      \"parentId\",\n                      \"id\",\n                      {\n                        operation: \"rights\",\n                        variables: {\n                          idChannel: { type: \"Int\", required: true },\n                          rightsLimit: {\n                            name: \"limit\",\n                            value: 999,\n                            type: \"Int\",\n                          },\n                          rightsOffset: {\n                            name: \"offset\",\n                            value: 0,\n                            type: \"Int\",\n                          },\n                        },\n                        fields: [\n                          \"id\",\n                          \"label\",\n                          {\n                            operation: \"users\",\n                            variables: {\n                              userLimit: {\n                                name: \"limit\",\n                                value: 999,\n                                type: \"Int\",\n                              },\n                              userFilter: {\n                                name: \"filters\",\n                                value: \"doe\",\n                                type: \"String\",\n                              },\n                            },\n                            fields: [\"id\", \"name\"],\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  \"subField\",\n                  {\n                    operation: \"channels\",\n                    variables: {\n                      idChannel: { name: \"id\", type: \"Int\", required: true },\n                      channelLimit: { name: \"limit\", value: 999, type: \"Int\" },\n                    },\n                    fields: [\"id\", \"label\"],\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($id: ID, $visible: Boolean, $platformLimit: Int, $idChannel: Int!, $channelLimit: Int, $rightsLimit: Int, $rightsOffset: Int, $userLimit: Int, $userFilter: String) { getPublicationNames  { publication (id: $id) { id, name, platforms (visible: $visible, limit: $platformLimit) { totalCount, edges { label, code, parentId, id, rights (idChannel: $idChannel, limit: $rightsLimit, offset: $rightsOffset) { id, label, users (limit: $userLimit, filters: $userFilter) { id, name } } }, subField, channels (id: $idChannel, limit: $channelLimit) { id, label } } } } }`,\n      variables: {\n        id: 12,\n        visible: true,\n        platformLimit: 999,\n        idChannel: undefined,\n        channelLimit: 999,\n        rightsLimit: 999,\n        rightsOffset: 0,\n        userLimit: 999,\n        userFilter: \"doe\",\n      },\n    });\n  });\n\n  test(\"generates query with object variables nested in fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getPublicationNames\",\n        variables: { id: { type: \"ID\", value: 12 } },\n        fields: [\n          {\n            operation: \"publication\",\n            variables: {\n              input: {\n                value: { type: \"news\", tz: \"EST\" },\n                type: \"FilterInput\",\n              },\n            },\n            fields: [\"name\", \"publishedAt\"],\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($input: FilterInput, $id: ID) { getPublicationNames (id: $id) { publication (input: $input) { name, publishedAt } } }`,\n      variables: {\n        id: 12,\n        input: { type: \"news\", tz: \"EST\" },\n      },\n    });\n  });\n\n  test(\"generates query without extraneous brackets for operation with no fields\", () => {\n    const query = queryBuilder.query({\n      operation: \"getFilteredUsersCount\",\n    });\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsersCount   }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates queries without extraneous brackets for operations with no fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getFilteredUsersCount\",\n      },\n      {\n        operation: \"getAllUsersCount\",\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsersCount   getAllUsersCount   }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query without extraneous brackets for operations with empty fields\", () => {\n    const query = queryBuilder.query({\n      operation: \"getFilteredUsersCount\",\n      fields: [],\n    });\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsersCount   }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates queries without extraneous brackets for operations with empty fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getFilteredUsersCount\",\n        fields: [],\n      },\n      {\n        operation: \"getAllUsersCount\",\n        fields: [],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsersCount   getAllUsersCount   }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query without extraneous brackets for operation with empty fields of fields\", () => {\n    const query = queryBuilder.query({\n      operation: \"getFilteredUsers\",\n      fields: [\n        {\n          count: [],\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsers  { count  } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates queries without extraneous brackets for operations with empty fields of fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getFilteredUsers\",\n        fields: [\n          {\n            count: [],\n          },\n        ],\n      },\n      {\n        operation: \"getFilteredPosts\",\n        fields: [\n          {\n            count: [],\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsers  { count  } getFilteredPosts  { count  } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates query without extraneous brackets for operation with nested operation empty fields\", () => {\n    const query = queryBuilder.query({\n      operation: \"getFilteredUsers\",\n      fields: [\n        {\n          operation: \"average_age\",\n          fields: [],\n          variables: { format: \"months\" },\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `query ($format: String) { getFilteredUsers  { average_age (format: $format)  } }`,\n      variables: { format: \"months\" },\n    });\n  });\n\n  test(\"generates queries without extraneous brackets for operations with nested operation empty fields\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getFilteredUsers\",\n        fields: [\n          {\n            operation: \"average_age\",\n            fields: [],\n            variables: {},\n          },\n        ],\n      },\n      {\n        operation: \"getFilteredPosts\",\n        fields: [\n          {\n            operation: \"average_viewers\",\n            fields: [],\n            variables: {},\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query  { getFilteredUsers  { average_age   } getFilteredPosts  { average_viewers   } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates queries with object variables for multiple queries\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getPublicationData\",\n        variables: { id: { type: \"ID\", value: 12 } },\n        fields: [\"publishedAt\"],\n      },\n      {\n        operation: \"getPublicationUsers\",\n        variables: { name: { value: \"johndoe\" } },\n        fields: [\"full_name\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($id: ID, $name: String) { getPublicationData (id: $id) { publishedAt } getPublicationUsers (name: $name) { full_name } }`,\n      variables: {\n        id: 12,\n        name: \"johndoe\",\n      },\n    });\n  });\n\n  test(\"generates queries with object variables for multiple queries with nested variables\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"getPublicationData\",\n        variables: { id: { type: \"ID\", value: 12 } },\n        fields: [\n          \"publishedAt\",\n          {\n            operation: \"publicationOrg\",\n            variables: { location: \"mars\" },\n            fields: [\"name\"],\n          },\n        ],\n      },\n      {\n        operation: \"getPublicationUsers\",\n        variables: { name: { value: \"johndoe\" } },\n        fields: [\"full_name\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($id: ID, $location: String, $name: String) { getPublicationData (id: $id) { publishedAt, publicationOrg (location: $location) { name } } getPublicationUsers (name: $name) { full_name } }`,\n      variables: {\n        id: 12,\n        location: \"mars\",\n        name: \"johndoe\",\n      },\n    });\n  });\n\n  test(\"generates query with operation name\", () => {\n    const query = queryBuilder.query(\n      [\n        {\n          operation: \"getPublicationNames\",\n          variables: { id: { type: \"ID\", value: 12 } },\n          fields: [\"name\", \"publishedAt\"],\n        },\n      ],\n      null,\n      {\n        operationName: \"operation\",\n      }\n    );\n\n    expect(query).toEqual({\n      query: `query operation ($id: ID) { getPublicationNames (id: $id) { name, publishedAt } }`,\n      variables: {\n        id: 12,\n      },\n    });\n  });\n\n  test(\"generates query arguments different from variable name\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"someoperation\",\n        fields: [\n          {\n            operation: \"nestedoperation\",\n            fields: [\"field1\"],\n            variables: {\n              id2: {\n                name: \"id\",\n                type: \"ID\",\n                value: 123,\n              },\n            },\n          },\n        ],\n        variables: {\n          id1: {\n            name: \"id\",\n            type: \"ID\",\n            value: 456,\n          },\n        },\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `query ($id2: ID, $id1: ID) { someoperation (id: $id1) { nestedoperation (id: $id2) { field1 } } }`,\n      variables: {\n        id1: 456,\n        id2: 123,\n      },\n    });\n  });\n\n  test(\"generates query arguments with inline fragment\", () => {\n    const query = queryBuilder.query({\n      operation: \"thought\",\n      fields: [\n        \"id\",\n        \"name\",\n        \"thought\",\n        {\n          operation: \"FragmentType\",\n          fields: [\"grade\"],\n          fragment: true,\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `query  { thought  { id, name, thought, ... on FragmentType  { grade } } }`,\n      variables: {},\n    });\n  });\n\n  test(\"generates aliased nested queries\", () => {\n    const query = queryBuilder.query([\n      {\n        operation: \"singleRootQuery\",\n        variables: {},\n        fields: [\n          {\n            operation: \"nestedQuery\",\n            variables: {},\n            fields: [\"whatever\"],\n          },\n          {\n            operation: {\n              alias: \"duplicatedNestedQuery\",\n              name: \"nestedQuery\",\n            },\n            variables: {},\n            fields: [\"whatever\"],\n          },\n        ],\n      },\n    ]); // query\n    expect(query).toEqual({\n      query: `query  { singleRootQuery  { nestedQuery  { whatever }, duplicatedNestedQuery: nestedQuery  { whatever } } }`,\n      variables: {},\n    }); // expect\n  }); // test\n});\n\ndescribe(\"Mutation\", () => {\n  test(\"generates mutation query\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"thoughtCreate\",\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $thought: String) {\n  thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n      },\n    });\n  });\n\n  test(\"generates mutation query with alias\", () => {\n    const query = queryBuilder.mutation({\n      operation: {\n        name: \"thoughtCreate\",\n        alias: \"myThoughtCreate\",\n      },\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $thought: String) {\n  myThoughtCreate: thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n      },\n    });\n  });\n\n  test(\"generates mutations with the same operation with different alias\", () => {\n    const query = queryBuilder.mutation([\n      {\n        operation: {\n          name: \"thoughtCreate\",\n          alias: \"myThoughtCreate\",\n        },\n        variables: {\n          name: \"Tyrion Lannister\",\n          thought: \"I drink and I know things.\",\n        },\n        fields: [\"id\"],\n      },\n      {\n        operation: {\n          name: \"thoughtCreate\",\n          alias: \"yourThoughtCreate\",\n        },\n        variables: {\n          character: \"Eddard Stark\",\n          quote: \"Winter is coming.\",\n        },\n        fields: [\"id\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $thought: String, $character: String, $quote: String) {\n  myThoughtCreate: thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n  yourThoughtCreate: thoughtCreate (character: $character, quote: $quote) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n        character: \"Eddard Stark\",\n        quote: \"Winter is coming.\",\n      },\n    });\n  });\n\n  test(\"generates mutation query with required variables\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"userSignup\",\n      variables: {\n        name: \"Jon Doe\",\n        email: { value: \"jon.doe@example.com\", required: true },\n        password: { value: \"123456\", required: true },\n      },\n      fields: [\"userId\"],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $email: String!, $password: String!) {\n  userSignup (name: $name, email: $email, password: $password) {\n    userId\n  }\n}`,\n      variables: {\n        name: \"Jon Doe\",\n        email: \"jon.doe@example.com\",\n        password: \"123456\",\n      },\n    });\n  });\n\n  test(\"generates multiple mutations\", () => {\n    const query = queryBuilder.mutation([\n      {\n        operation: \"thoughtCreate\",\n        variables: {\n          name: \"Tyrion Lannister\",\n          thought: \"I drink and I know things.\",\n        },\n        fields: [\"id\"],\n      },\n      {\n        operation: \"prayerCreate\",\n        variables: {\n          name: { value: \"Tyrion Lannister\" },\n          prayer: { value: \"I wish for winter.\" },\n        },\n        fields: [\"id\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $thought: String, $prayer: String) {\n  thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n  prayerCreate (name: $name, prayer: $prayer) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n        prayer: \"I wish for winter.\",\n      },\n    });\n  });\n\n  test(\"generates multiple mutations with named variables\", () => {\n    const query = queryBuilder.mutation([\n      {\n        operation: \"delete0: deleteUser\",\n        variables: {\n          id0: {\n            name: \"id\",\n            type: \"ID\",\n            value: \"user_1234\",\n          },\n        },\n        fields: [\"id\"],\n      },\n      {\n        operation: \"delete1: deleteUser\",\n        variables: {\n          id1: {\n            name: \"id\",\n            type: \"ID\",\n            value: \"user_5678\",\n          },\n        },\n        fields: [\"id\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `mutation ($id0: ID, $id1: ID) {\n  delete0: deleteUser (id: $id0) {\n    id\n  }\n  delete1: deleteUser (id: $id1) {\n    id\n  }\n}`,\n      variables: {\n        id0: \"user_1234\",\n        id1: \"user_5678\",\n      },\n    });\n  });\n\n  test(\"generates mutation with required variables\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"userSignup\",\n      variables: {\n        name: \"Jon Doe\",\n        email: { value: \"jon.doe@example.com\", required: true },\n        password: { value: \"123456\", required: true },\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($name: String, $email: String!, $password: String!) {\n  userSignup (name: $name, email: $email, password: $password) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Jon Doe\",\n        email: \"jon.doe@example.com\",\n        password: \"123456\",\n      },\n    });\n  });\n\n  test(\"generates mutation custom type\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"userPhoneNumber\",\n      variables: {\n        phone: {\n          value: { prefix: \"+91\", number: \"9876543210\" },\n          type: \"PhoneNumber\",\n          required: true,\n        },\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($phone: PhoneNumber!) {\n  userPhoneNumber (phone: $phone) {\n    id\n  }\n}`,\n      variables: {\n        phone: { prefix: \"+91\", number: \"9876543210\" },\n      },\n    });\n  });\n\n  test(\"generate mutation without fields selection\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"logout\",\n    });\n\n    expect(query).toEqual({\n      query: `mutation  {\n  logout  \n}`,\n      variables: {},\n    });\n  });\n\n  test(\"generates nested mutation operations without variables\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"namespaceField\",\n      fields: [\n        {\n          operation: \"innerMutation\",\n          fields: [\"id\"],\n          variables: {},\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `mutation  {\n  namespaceField  {\n    innerMutation  { id }\n  }\n}`,\n      variables: {},\n    });\n  });\n\n  test(\"generates nested mutation operations with variables\", () => {\n    const query = queryBuilder.mutation({\n      operation: \"namespaceField\",\n      fields: [\n        {\n          operation: \"innerMutation\",\n          variables: {\n            name: { value: \"stringy\" },\n          },\n          fields: [\"id\"],\n        },\n      ],\n    });\n\n    expect(query).toEqual({\n      query: `mutation ($name: String) {\n  namespaceField  {\n    innerMutation (name: $name) { id }\n  }\n}`,\n      variables: { name: \"stringy\" },\n    });\n  });\n\n  test(\"generates multiple nested mutation operations with variables\", () => {\n    const query = queryBuilder.mutation([\n      {\n        operation: \"namespaceField\",\n        fields: [\n          {\n            operation: \"mutationA\",\n            variables: {\n              nameA: { value: \"A\" },\n            },\n            fields: [\"id\"],\n          },\n        ],\n      },\n      {\n        operation: \"namespaceField\",\n        fields: [\n          {\n            operation: \"mutationB\",\n            variables: {\n              nameB: { value: \"B\" },\n            },\n            fields: [\"id\"],\n          },\n        ],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `mutation ($nameB: String, $nameA: String) {\n  namespaceField  {\n    mutationA (nameA: $nameA) { id }\n  }\n  namespaceField  {\n    mutationB (nameB: $nameB) { id }\n  }\n}`,\n      variables: { nameA: \"A\", nameB: \"B\" },\n    });\n  });\n\n  test.only(\"generates mutation with operation name\", () => {\n    const query = queryBuilder.mutation(\n      [\n        {\n          operation: \"thoughtCreate\",\n          variables: {\n            name: \"Tyrion Lannister\",\n            thought: \"I drink and I know things.\",\n          },\n          fields: [\"id\"],\n        },\n      ],\n      undefined,\n      {\n        operationName: \"operation\",\n      }\n    );\n\n    expect(query).toEqual({\n      query: `mutation operation ($name: String, $thought: String) {\n      thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n    }`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n      },\n    });\n  });\n});\n\ndescribe(\"Subscriptions\", () => {\n  test(\"generates subscriptions\", () => {\n    const query = queryBuilder.subscription([\n      {\n        operation: \"thoughtCreate\",\n        variables: {\n          name: \"Tyrion Lannister\",\n          thought: \"I drink and I know things.\",\n        },\n        fields: [\"id\"],\n      },\n      {\n        operation: \"prayerCreate\",\n        variables: {\n          name: { value: \"Tyrion Lannister\" },\n          prayer: { value: \"I wish for winter.\" },\n        },\n        fields: [\"id\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `subscription ($name: String, $thought: String, $prayer: String) {\n  thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n  prayerCreate (name: $name, prayer: $prayer) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n        prayer: \"I wish for winter.\",\n      },\n    });\n  });\n\n  test(\"generates subscriptions with query alias\", () => {\n    const query = queryBuilder.subscription([\n      {\n        operation: {\n          name: \"thoughtCreate\",\n          alias: \"myThoughtCreate\",\n        },\n        variables: {\n          name: \"Tyrion Lannister\",\n          thought: \"I drink and I know things.\",\n        },\n        fields: [\"id\"],\n      },\n      {\n        operation: {\n          name: \"prayerCreate\",\n          alias: \"myPrayerCreate\",\n        },\n        variables: {\n          name: { value: \"Tyrion Lannister\" },\n          prayer: { value: \"I wish for winter.\" },\n        },\n        fields: [\"id\"],\n      },\n    ]);\n\n    expect(query).toEqual({\n      query: `subscription ($name: String, $thought: String, $prayer: String) {\n  myThoughtCreate: thoughtCreate (name: $name, thought: $thought) {\n    id\n  }\n  myPrayerCreate: prayerCreate (name: $name, prayer: $prayer) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Tyrion Lannister\",\n        thought: \"I drink and I know things.\",\n        prayer: \"I wish for winter.\",\n      },\n    });\n  });\n\n  test(\"generates subscription with required variables\", () => {\n    const query = queryBuilder.subscription({\n      operation: \"userSignup\",\n      variables: {\n        name: \"Jon Doe\",\n        email: { value: \"jon.doe@example.com\", required: true },\n        password: { value: \"123456\", required: true },\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `subscription ($name: String, $email: String!, $password: String!) {\n  userSignup (name: $name, email: $email, password: $password) {\n    id\n  }\n}`,\n      variables: {\n        name: \"Jon Doe\",\n        email: \"jon.doe@example.com\",\n        password: \"123456\",\n      },\n    });\n  });\n\n  test(\"generates subscription custom type\", () => {\n    const query = queryBuilder.subscription({\n      operation: \"userPhoneNumber\",\n      variables: {\n        phone: {\n          value: { prefix: \"+91\", number: \"9876543210\" },\n          type: \"PhoneNumber\",\n          required: true,\n        },\n      },\n      fields: [\"id\"],\n    });\n\n    expect(query).toEqual({\n      query: `subscription ($phone: PhoneNumber!) {\n  userPhoneNumber (phone: $phone) {\n    id\n  }\n}`,\n      variables: {\n        phone: { prefix: \"+91\", number: \"9876543210\" },\n      },\n    });\n  });\n});\n"]}