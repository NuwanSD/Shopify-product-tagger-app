{"version":3,"file":"DefaultAppSyncMutationAdapter.js","sourceRoot":"","sources":["../../src/adapters/DefaultAppSyncMutationAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n@class DefaulAppSynctMutationAdapter\n@desc A basic implementation to use with AWS AppSync\n@desc modify the output of the mutation template by passing a second argument to mutation(options, AdapterClass)\n */\nimport Fields from \"../Fields\";\nimport IQueryBuilderOptions, { IOperation } from \"../IQueryBuilderOptions\";\nimport OperationType from \"../OperationType\";\nimport Utils from \"../Utils\";\nimport IMutationAdapter from \"./IMutationAdapter\";\n\nexport default class DefaultAppSyncMutationAdapter implements IMutationAdapter {\n  private variables: any | undefined;\n  private fields: Fields | undefined;\n  private operation!: string | IOperation;\n\n  constructor(options: IQueryBuilderOptions | IQueryBuilderOptions[]) {\n    if (Array.isArray(options)) {\n      this.variables = Utils.resolveVariables(options);\n    } else {\n      this.variables = options.variables;\n      this.fields = options.fields;\n      this.operation = options.operation;\n    }\n  }\n\n  public mutationBuilder() {\n    return this.operationWrapperTemplate(\n      this.variables,\n      this.operationTemplate(this.operation)\n    );\n  }\n\n  public mutationsBuilder(mutations: IQueryBuilderOptions[]) {\n    const content = mutations.map((opts) => {\n      this.operation = opts.operation;\n      this.variables = opts.variables;\n      this.fields = opts.fields;\n      return this.operationTemplate(opts.operation);\n    });\n    return this.operationWrapperTemplate(\n      Utils.resolveVariables(mutations),\n      content.join(\"\\n  \")\n    );\n  }\n  // Convert object to name and argument map. eg: (id: $id)\n  private queryDataNameAndArgumentMap() {\n    return this.variables && Object.keys(this.variables).length\n      ? `(${Object.keys(this.variables).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}${key}: $${key}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  private queryDataArgumentAndTypeMap(variables: any): string {\n    return Object.keys(variables).length\n      ? `(${Object.keys(variables).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}$${key}: ${Utils.queryDataType(\n              variables[key]\n            )}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  // start of mutation building\n  private operationWrapperTemplate(variables: any, content: string): any {\n    const operation =\n      typeof this.operation === \"string\" ? this.operation : this.operation.name;\n\n    return {\n      query: `${OperationType.Mutation} ${\n        operation.charAt(0).toUpperCase() + operation.slice(1)\n      } ${this.queryDataArgumentAndTypeMap(variables)} {\n  ${content}\n}`,\n      variables: Utils.queryVariablesMap(variables),\n    };\n  }\n\n  private operationTemplate(operation: string | IOperation): string {\n    const operationName =\n      typeof operation === \"string\"\n        ? operation\n        : `${operation.alias}: ${operation.name}`;\n\n    return `${operationName} ${this.queryDataNameAndArgumentMap()} {\n    ${this.queryFieldsMap(this.fields)}\n  }`;\n  }\n\n  // Fields selection map. eg: { id, name }\n  private queryFieldsMap(fields?: Fields): string {\n    return Array.isArray(fields)\n      ? fields\n          .map((field) =>\n            typeof field === \"object\"\n              ? `${Object.keys(field)[0]} { ${this.queryFieldsMap(\n                  Object.values(field)[0]\n                )} }`\n              : `${field}`\n          )\n          .join(\", \")\n      : \"\";\n  }\n}\n"]}