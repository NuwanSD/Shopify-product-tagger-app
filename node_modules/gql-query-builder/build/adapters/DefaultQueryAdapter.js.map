{"version":3,"file":"DefaultQueryAdapter.js","sourceRoot":"","sources":["../../src/adapters/DefaultQueryAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n@class DefaultQueryAdapter\n@desc A basic implementation to use\n@desc modify the output of the query template by passing a second argument to query(options, AdapterClass)\n */\nimport Fields from \"../Fields\";\nimport IQueryBuilderOptions, { IOperation } from \"../IQueryBuilderOptions\";\nimport OperationType from \"../OperationType\";\nimport Utils from \"../Utils\";\nimport IQueryAdapter from \"./IQueryAdapter\";\nimport VariableOptions from \"../VariableOptions\";\n\nexport default class DefaultQueryAdapter implements IQueryAdapter {\n  private variables!: any | undefined;\n  private fields: Fields | undefined;\n  private operation!: string | IOperation;\n  private config: { [key: string]: unknown };\n\n  constructor(\n    options: IQueryBuilderOptions | IQueryBuilderOptions[],\n    configuration?: { [key: string]: unknown }\n  ) {\n    // Default configs\n    this.config = {\n      operationName: \"\",\n    };\n    if (configuration) {\n      Object.entries(configuration).forEach(([key, value]) => {\n        this.config[key] = value;\n      });\n    }\n\n    if (Array.isArray(options)) {\n      this.variables = Utils.resolveVariables(options);\n    } else {\n      this.variables = options.variables;\n      this.fields = options.fields || [];\n      this.operation = options.operation;\n    }\n  }\n  // kicks off building for a single query\n  public queryBuilder() {\n    return this.operationWrapperTemplate(\n      this.operationTemplate(this.variables)\n    );\n  }\n  // if we have an array of options, call this\n  public queriesBuilder(queries: IQueryBuilderOptions[]) {\n    const content = () => {\n      const tmpl: string[] = [];\n      queries.forEach((query) => {\n        if (query) {\n          this.operation = query.operation;\n          this.fields = query.fields;\n          tmpl.push(this.operationTemplate(query.variables));\n        }\n      });\n      return tmpl.join(\" \");\n    };\n    return this.operationWrapperTemplate(content());\n  }\n\n  // Convert object to argument and type map. eg: ($id: Int)\n  private queryDataArgumentAndTypeMap(): string {\n    let variablesUsed: { [key: string]: unknown } = this.variables;\n\n    if (this.fields && typeof this.fields === \"object\") {\n      variablesUsed = {\n        ...Utils.getNestedVariables(this.fields),\n        ...variablesUsed,\n      };\n    }\n    return variablesUsed && Object.keys(variablesUsed).length > 0\n      ? `(${Object.keys(variablesUsed).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}$${key}: ${Utils.queryDataType(\n              variablesUsed[key]\n            )}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  private operationWrapperTemplate(content: string): {\n    variables: { [p: string]: unknown };\n    query: string;\n  } {\n    let query = `${\n      OperationType.Query\n    } ${this.queryDataArgumentAndTypeMap()} { ${content} }`;\n    query = query.replace(\n      \"query\",\n      `query${\n        this.config.operationName !== \"\" ? \" \" + this.config.operationName : \"\"\n      }`\n    );\n    return {\n      query,\n      variables: Utils.queryVariablesMap(this.variables, this.fields),\n    };\n  }\n  // query\n  private operationTemplate(variables: VariableOptions | undefined) {\n    const operation =\n      typeof this.operation === \"string\"\n        ? this.operation\n        : `${this.operation.alias}: ${this.operation.name}`;\n\n    return `${operation} ${\n      variables ? Utils.queryDataNameAndArgumentMap(variables) : \"\"\n    } ${\n      this.fields && this.fields.length > 0\n        ? \"{ \" + Utils.queryFieldsMap(this.fields) + \" }\"\n        : \"\"\n    }`;\n  }\n}\n"]}