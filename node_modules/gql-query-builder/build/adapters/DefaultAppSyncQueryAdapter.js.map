{"version":3,"file":"DefaultAppSyncQueryAdapter.js","sourceRoot":"","sources":["../../src/adapters/DefaultAppSyncQueryAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n@class DefaultAppSyncQueryAdapter\n@desc A basic implementation to use with AWS AppSync\n@desc modify the output of the query template by passing a second argument to query(options, DefaultAppSyncQueryAdapter)\n */\nimport Fields from \"../Fields\";\nimport IQueryBuilderOptions, { IOperation } from \"../IQueryBuilderOptions\";\nimport OperationType from \"../OperationType\";\nimport Utils from \"../Utils\";\nimport IQueryAdapter from \"./IQueryAdapter\";\n\nexport default class DefaultAppSyncQueryAdapter implements IQueryAdapter {\n  private variables!: any | undefined;\n  private fields: Fields | undefined;\n  private operation!: string | IOperation;\n\n  constructor(options: IQueryBuilderOptions | IQueryBuilderOptions[]) {\n    if (Array.isArray(options)) {\n      this.variables = Utils.resolveVariables(options);\n    } else {\n      this.variables = options.variables;\n      this.fields = options.fields || [];\n      this.operation = options.operation;\n    }\n  }\n  // kicks off building for a single query\n  public queryBuilder() {\n    return this.operationWrapperTemplate(this.operationTemplate());\n  }\n  // if we have an array of options, call this\n  public queriesBuilder(queries: IQueryBuilderOptions[]) {\n    const content = () => {\n      const tmpl: string[] = [];\n      queries.forEach((query) => {\n        if (query) {\n          this.operation = query.operation;\n          this.fields = query.fields;\n          this.variables = query.variables;\n          tmpl.push(this.operationTemplate());\n        }\n      });\n      return tmpl.join(\" \");\n    };\n    return this.operationWrapperTemplate(content());\n  }\n\n  // Convert object to name and argument map. eg: (id: $id)\n  public queryDataNameAndArgumentMap() {\n    return this.variables && Object.keys(this.variables).length\n      ? `(${Object.keys(this.variables).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}${key}: $${key}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  // Convert object to argument and type map. eg: ($id: Int)\n  private queryDataArgumentAndTypeMap(): string {\n    return this.variables && Object.keys(this.variables).length\n      ? `(${Object.keys(this.variables).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}$${key}: ${this.queryDataType(\n              this.variables[key]\n            )}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  private queryDataType = (variable: any) => {\n    let type = \"String\";\n\n    const value = typeof variable === \"object\" ? variable.value : variable;\n\n    if (variable.type !== undefined) {\n      type = variable.type;\n    } else {\n      switch (typeof value) {\n        case \"object\":\n          type = \"Object\";\n          break;\n\n        case \"boolean\":\n          type = \"Boolean\";\n          break;\n\n        case \"number\":\n          type = value % 1 === 0 ? \"Int\" : \"Float\";\n          break;\n      }\n    }\n\n    if (typeof variable === \"object\" && variable.required) {\n      type += \"!\";\n    }\n\n    return type;\n  };\n\n  private operationWrapperTemplate(content: string): {\n    variables: { [p: string]: unknown };\n    query: string;\n  } {\n    const operation =\n      typeof this.operation === \"string\" ? this.operation : this.operation.name;\n\n    return {\n      query: `${OperationType.Query} ${operation\n        .charAt(0)\n        .toUpperCase()}${operation.slice(\n        1\n      )} ${this.queryDataArgumentAndTypeMap()} { ${content} }`,\n      variables: Utils.queryVariablesMap(this.variables),\n    };\n  }\n  // query\n  private operationTemplate() {\n    const operation =\n      typeof this.operation === \"string\"\n        ? this.operation\n        : `${this.operation.alias}: ${this.operation.name}`;\n\n    return `${operation} ${this.queryDataNameAndArgumentMap()} { nodes { ${Utils.queryFieldsMap(\n      this.fields\n    )} } }`;\n  }\n}\n"]}