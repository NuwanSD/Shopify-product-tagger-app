{"version":3,"sources":["/app/packages/framework/src/effects.ts"],"sourcesContent":["import type { RecordData } from \"@gadgetinc/api-client-core\";\nimport { ChangeTracking, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { InternalError, InvalidActionInputError, MisconfiguredActionError, PermissionDeniedError } from \"./errors\";\nimport { Globals, actionContextLocalStorage } from \"./globals\";\nimport { modelListIndex, modelsMap } from \"./metadata\";\nimport { AppTenancyKey } from \"./tenancy\";\nimport type { AnyParams, ModelMetadata, NotYetTyped } from \"./types\";\nimport { assert, isEmpty, isObjectLike, keyBy, pickBy } from \"./utils\";\n\nfunction getBelongsToRelationParams(model: ModelMetadata, params: Record<string, any>) {\n  const belongsToParams: any = {};\n\n  for (const field of Object.values(model.fields) as any[]) {\n    if (field.fieldType != \"BelongsTo\") continue;\n    const modelParams = typeof params[model.apiIdentifier] === \"object\" ? params[model.apiIdentifier] : undefined;\n    const belongsToParam =\n      modelParams && typeof modelParams[field.apiIdentifier] === \"object\" ? modelParams[field.apiIdentifier] : undefined;\n    const belongsToId = belongsToParam?.[LINK_PARAM] !== undefined ? belongsToParam[LINK_PARAM] : belongsToParam?.id;\n    if (belongsToId !== undefined) {\n      belongsToParams[`${field.apiIdentifier}Id`] = belongsToId;\n    }\n  }\n\n  return belongsToParams;\n}\n\nexport function createGadgetRecord<Shape>(apiIdentifier: string, data: Shape): GadgetRecord<Shape & { __typename: string }> {\n  const model = getModelByApiIdentifier(apiIdentifier);\n  const baseRecord = new GadgetRecord({\n    __typename: model.graphqlTypeName,\n  });\n  return Object.assign(baseRecord, data);\n}\n\n/**\n * Set incoming parameters onto a `record` object.\n *\n * @param params - Parameters for setting, usually from an action context or a  to set on the record\n * @param record - Record to apply parameters to\n */\nexport function applyParams(params: AnyParams, record: GadgetRecord<any>) {\n  const model = getModelByTypename(record.__typename);\n\n  // override the record with any new params, including relationId params from any _link params on belongs to relationships\n  // Change the code snippet in `ApplyParamsDetailsPanel.tsx` when the code below updates\n  Object.assign(record, params[model.apiIdentifier], getBelongsToRelationParams(model, params));\n}\n\n/**\n * Validates the given record, then creates or updates the record in the database.\n *\n * If any validation errors are encountered, they'll be thrown as a GadgetValidationError.\n *\n * Uses the Internal API for your application to persist data.\n *\n * The record param must have a `__typename` parameter.\n *\n * @param record - Record to save to the database\n */\nexport async function save(record: GadgetRecord<any>) {\n  const context = maybeGetActionContextFromLocalStorage();\n  const api = assert(context ? context.api : getRequestContext().api, \"api client is missing from the current context\");\n  const model = getModelByTypename(record.__typename);\n\n  await (await Globals.modelValidator(model.key)).validate({ api, logger: Globals.logger }, record);\n\n  if (!api.internal[model.apiIdentifier]) {\n    throw new InternalError(\n      `Gadget API client doesn't have an internal model manager for ${model.apiIdentifier} to run a Save Record function -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  let result: GadgetRecord<any>;\n\n  if (\"createdAt\" in record && record.createdAt) {\n    result = await api.internal[model.apiIdentifier].update(record.id, {\n      [model.apiIdentifier]: changedAttributes(model, record),\n    });\n  } else {\n    result = await api.internal[model.apiIdentifier].create({\n      [model.apiIdentifier]: writableAttributes(model, record),\n    });\n  }\n\n  Object.assign(record, { ...result });\n  record.flushChanges(ChangeTracking.SinceLastPersisted);\n}\n\n/**\n * Deletes the given record from your database.\n *\n * @param record - Record to delete from the database\n */\nexport async function deleteRecord(record: GadgetRecord<any>) {\n  const context = maybeGetActionContextFromLocalStorage();\n\n  const api = assert(context ? context.api : getRequestContext().api, \"api client is missing from the current context\");\n  const scope = context ? context.scope : {};\n  const model = getModelByTypename(record.__typename);\n\n  const id = assert(record.id, `record.id not set on record in scope, has the record been persisted?`);\n\n  if (!api.internal[model.apiIdentifier]) {\n    throw new InternalError(\n      `Gadget API client doesn't have an internal model manager for ${model.apiIdentifier} to run a Delete Record effect -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  await api.internal[model.apiIdentifier].delete(id);\n  scope.recordDeleted = true;\n}\n\nexport async function shopifySync(params: AnyParams, record: GadgetRecord<any>) {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { syncSince?: Date; id: bigint; shopId: string; models: any; force: boolean } = assert(\n    record,\n    \"cannot start a shop sync from this action\"\n  );\n\n  const shopId = assert(syncRecord.shopId, \"a shop is required to start a sync\");\n\n  // verify that models is an array of strings if defined\n\n  if (!syncRecord.models || (Array.isArray(syncRecord.models) && syncRecord.models.every((m) => typeof m == \"string\"))) {\n    try {\n      await effectAPIs.sync(\n        syncRecord.id.toString(),\n        shopId,\n        syncRecord.syncSince,\n        syncRecord.models,\n        syncRecord.force,\n        params.startReason\n      );\n    } catch (error) {\n      Globals.logger.error({ error, connectionSyncId: syncRecord.id }, \"an error occurred starting shop sync\");\n      throw error;\n    }\n  } else {\n    throw new InvalidActionInputError(\"Models must be an array of api identifiers\");\n  }\n}\n\n/**\n * Enforce that the given record is only accessible by the current shop. For multi-tenant Shopify applications, this is key for enforcing data can only be accessed by the shop that owns it.\n *\n * For existing records, this function verifies the record object has the same `shopId` as the shop in the current session, and throws if not\n * For new records, this function sets the record's `shopId` to the current session's `shopId`.\n *\n * The `shopBelongsToField` option is a required parameter if the model has more than one related shop field to specify which field to use.\n *\n * @param params - Incoming parameters, validated against the current `shopId`\n * @param record - Record to validate or set the `shopId` on\n * @param options - Options for the function\n */\nexport async function preventCrossShopDataAccess(params: AnyParams, record: GadgetRecord<any>, options?: { shopBelongsToField: string }) {\n  const context = getActionContextFromLocalStorage();\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross shop data access outside of an action effect\");\n  }\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n  const shopBelongsToField = options?.shopBelongsToField;\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.shopify?.shopId === undefined) {\n    return;\n  }\n\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const shopId = String(appTenancy.shopify.shopId);\n\n  // If this effect is being added to the Shopify Shop model, simply compare the record's ID\n  if (model.key == ShopifyShopKey) {\n    if (record && String(record.id) !== shopId) {\n      throw new PermissionDeniedError();\n    }\n    return;\n  }\n\n  const fieldsIsBelongsToShopifyShop = Object.values(model.fields).filter(\n    (f) => f.fieldType === FieldType.BelongsTo && f.configuration.relatedModelKey === ShopifyShopKey\n  );\n\n  if (fieldsIsBelongsToShopifyShop.length === 0) {\n    throw new MisconfiguredActionError(\"This model is missing a related shop field.\");\n  }\n\n  if (fieldsIsBelongsToShopifyShop.length > 1 && !shopBelongsToField) {\n    throw new MisconfiguredActionError(\n      \"This function is missing a related shop field option. `shopBelongsToField` is a required option parameter if the model has more than one related shop field.\"\n    );\n  }\n\n  let relatedField = fieldsIsBelongsToShopifyShop[0];\n\n  if (shopBelongsToField) {\n    const selectedField = Object.values(model.fields).find((f) => f.apiIdentifier === shopBelongsToField);\n    if (!selectedField) {\n      throw new MisconfiguredActionError(\"The selected shop relation field does not exist.\");\n    }\n\n    if (selectedField.fieldType !== FieldType.BelongsTo || selectedField.configuration.relatedModelKey !== ShopifyShopKey) {\n      throw new MisconfiguredActionError(\n        \"The selected shop relation field should be a `Belongs To` relationship to the `Shopify Shop` model.\"\n      );\n    } else {\n      relatedField = selectedField;\n    }\n  }\n\n  const input = params[model.apiIdentifier];\n\n  // if we're trying to set the params to a shop other than the tenant we should reject\n  if (isObjectLike(input)) {\n    const objectInput = input as Record<string, any>;\n    if (objectInput[relatedField.apiIdentifier]) {\n      if (String(objectInput[relatedField.apiIdentifier][LINK_PARAM]) !== shopId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      objectInput[relatedField.apiIdentifier] = {\n        [LINK_PARAM]: shopId,\n      };\n    }\n  } else {\n    params[model.apiIdentifier] = {\n      [relatedField.apiIdentifier]: {\n        [LINK_PARAM]: shopId,\n      },\n    };\n  }\n\n  if (record) {\n    const value = record.getField(relatedField.apiIdentifier);\n\n    // if the record doesn't have a shop set then anyone can update it\n    if (value) {\n      const recordShopId = typeof value === \"object\" ? value[LINK_PARAM] : value;\n      if (String(recordShopId) !== shopId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      // we have to re-apply the params to the record to ensure that this effect still works correctly if it occurs after \"apply params\"\n      record.setField(relatedField.apiIdentifier, {\n        [LINK_PARAM]: shopId,\n      });\n    }\n  }\n}\n\nexport async function finishBulkOperation(record: GadgetRecord<any>) {\n  if (!record?.id) {\n    Globals.logger.warn(`Expected bulk operation record to be present for action`);\n    return;\n  }\n\n  const context = getActionContextFromLocalStorage();\n  const shopifyAPI = await (context.connections as Record<string, any>).shopify.forShopId(record.shopId);\n  if (!shopifyAPI) {\n    Globals.logger.error(`Could not instantiate Shopify client for shop ID ${record.shopId}`);\n    return;\n  }\n  const bulkOperation = (\n    await shopifyAPI.graphql(`query {\n        node(id: \"${ShopifyBulkOperationGIDForId(record.id)}\") {\n          ... on BulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            type\n            partialDataUrl\n            rootObjectCount\n          }\n        }\n      }`)\n  ).node;\n\n  // normalize the mixed upper/lowercase (GraphQL/REST) to lowercase\n  const { status, errorCode, type } = bulkOperation;\n  Object.assign(record, {\n    ...bulkOperation,\n    status: status?.toLowerCase(),\n    errorCode: errorCode?.toLowerCase(),\n    type: type?.toLowerCase(),\n    id: record.id,\n  });\n}\n\nexport async function globalShopifySync(params: {\n  apiKeys: string[];\n  syncSince: string;\n  models: string[];\n  force: boolean;\n  startReason: string;\n}) {\n  const context = maybeGetActionContextFromLocalStorage();\n  const effectAPIs = assert(\n    context ? context.effectAPIs : getRequestContext().effectAPIs,\n    \"effect apis is missing from the current context\"\n  );\n  const api = assert(context ? context.api : getRequestContext().api, \"api client is missing from the current context\");\n\n  const { apiKeys, syncSince, models, force, startReason } = params;\n\n  const { shopModelIdentifier, installedViaKeyFieldIdentifier, runShopSyncIdentifier, accessTokenIdentifier, forceFieldIdentifier } =\n    await effectAPIs.getSyncIdentifiers();\n\n  const pageSize = 250;\n  let pageInfo: { first?: number; endCursor?: string; hasNextPage: boolean } = { first: pageSize, hasNextPage: true };\n  const results: { id: string; domain: string; state: Record<string, any>; [key: string]: any }[] = [];\n\n  if (apiKeys && apiKeys.length > 0) {\n    try {\n      while (pageInfo.hasNextPage) {\n        const records = await api.internal[shopModelIdentifier].findMany({\n          filter: {\n            [installedViaKeyFieldIdentifier]: {\n              in: apiKeys,\n            },\n            state: {\n              inState: \"created.installed\",\n            },\n            planName: {\n              notIn: [\"frozen\", \"fraudulent\", \"cancelled\"],\n            },\n          },\n          first: pageInfo.first,\n          after: pageInfo.endCursor,\n        });\n        results.push(...records);\n        pageInfo = records.pagination.pageInfo;\n      }\n    } catch (error) {\n      Globals.logger.info({ userVisible: true, error, apiKeys }, \"could not get shops for all API keys\");\n      throw error;\n    }\n\n    for (const result of results) {\n      // skip the sync if there is no accessToken set or if the state is uninstalled\n      if (isEmpty(result[accessTokenIdentifier]) || result.state?.created == \"uninstalled\") {\n        Globals.logger.info({ shopId: result.id }, \"skipping sync for shop without access token or is uninstalled\");\n        continue;\n      }\n\n      try {\n        const response = await api.mutate(\n          `\n            mutation runSync($shopId: GadgetID!, $domain: String!, $syncSince: DateTime, $models: JSON${\n              forceFieldIdentifier ? \", $force: Boolean\" : \"\"\n            }, $startReason: String) {\n              ${runShopSyncIdentifier}(shopifySync:{\n                domain:$domain\n                syncSince:$syncSince\n                models:$models\n                ${forceFieldIdentifier ? `${forceFieldIdentifier}:$force` : \"\"}\n                shop:{\n                  _link:$shopId\n                }\n              }, startReason: $startReason) {\n                success\n                errors {\n                  message\n                }\n              }\n            }\n          `,\n          {\n            shopId: result.id,\n            domain: result.domain,\n            syncSince,\n            models,\n            ...(forceFieldIdentifier ? { force } : undefined),\n            startReason,\n          }\n        );\n\n        // we might have some errors such as the desired models not being enabled for the connection\n        if (response[runShopSyncIdentifier] && !response[runShopSyncIdentifier].success) {\n          Globals.logger.warn(\n            { userVisible: true, shop: result, error: response[runShopSyncIdentifier].errors },\n            \"couldn't start sync for shop\"\n          );\n        }\n      } catch (error) {\n        // log that the sync could not be started for the shop but continue\n        Globals.logger.warn({ userVisible: true, error, shop: result }, \"couldn't start sync for shop\");\n      }\n    }\n  } else {\n    throw new InvalidActionInputError(\"missing at least 1 api key\");\n  }\n}\n\n/**\n * Internal helper functions and variables\n */\n\n/**\n * Get action context without `params` and `record` from async local storage.\n */\nfunction getActionContextFromLocalStorage() {\n  return assert(actionContextLocalStorage.getStore(), \"this effect function should only be called from within an action\");\n}\n\n/**\n * Similar to `getActionContextFromLocalStorage` but returns `undefined` if there is no action context. (i.e. possibly called from a route)\n */\nfunction maybeGetActionContextFromLocalStorage() {\n  return actionContextLocalStorage.getStore();\n}\n\nfunction getRequestContext() {\n  return Globals.requestContext.get(\"requestContext\");\n}\n\nconst LINK_PARAM = \"_link\";\n\nfunction writableAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>) {\n  const fieldsByApiIdentifier = keyBy(Object.values(model.fields) as NotYetTyped[], \"apiIdentifier\");\n  return pickBy(record, (v, k) => fieldsByApiIdentifier[k]?.internalWritable);\n}\n\nfunction changedAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>) {\n  const changes = record.changes();\n  const attributes = Object.keys(changes).reduce((attrs, key) => {\n    attrs[key] = record[key];\n    return attrs;\n  }, {} as any);\n  return writableAttributes(model, attributes);\n}\n\nconst getModelByApiIdentifier = (apiIdentifier: string): ModelMetadata => {\n  const typename = modelListIndex[`api:${apiIdentifier}`];\n  if (!typename) {\n    throw new InternalError(`Model ${apiIdentifier} not found in available model metadata`, {\n      availableApiIdentifiers: Object.keys(modelListIndex),\n    });\n  }\n\n  return getModelByTypename(typename);\n};\n\nconst getModelByTypename = (typename: string): ModelMetadata => {\n  if (!typename) {\n    throw new InternalError(`No typename found on record, __typename must be set for accessing model metadata`);\n  }\n\n  const model = modelsMap[typename];\n  if (!model) {\n    throw new InternalError(`Model with typename ${typename} not found in available model metadata`, {\n      availableTypenames: Object.keys(modelsMap),\n    });\n  }\n\n  return model;\n};\n\nexport enum FieldType {\n  ID = \"ID\",\n  Number = \"Number\",\n  String = \"String\",\n  Enum = \"Enum\",\n  RichText = \"RichText\",\n  DateTime = \"DateTime\",\n  Email = \"Email\",\n  URL = \"URL\",\n  Money = \"Money\",\n  File = \"File\",\n  Color = \"Color\",\n  Password = \"Password\",\n  Computed = \"Computed\",\n  HasManyThrough = \"HasManyThrough\",\n  BelongsTo = \"BelongsTo\",\n  HasMany = \"HasMany\",\n  HasOne = \"HasOne\",\n  Boolean = \"Boolean\",\n  Model = \"Model\",\n  Object = \"Object\",\n  Array = \"Array\",\n  JSON = \"JSON\",\n  Code = \"Code\",\n  EncryptedString = \"EncryptedString\",\n  Vector = \"Vector\",\n  /**\n   * Any value at all.\n   * Prefer FieldType.JSON where possible, it's more descriptive.\n   */\n  Any = \"Any\",\n  Null = \"Null\",\n  RecordState = \"RecordState\",\n  RoleAssignments = \"RoleAssignments\",\n}\n\nconst shopifyModelKey = (modelName: string) => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-Shopify-${modelKey}`;\n};\n\nconst ShopifyShopKey = shopifyModelKey(\"Shop\");\n\nconst ShopifyBulkOperationGIDForId = (id: string) => `gid://shopify/BulkOperation/${id}`;\n"],"names":["createGadgetRecord","applyParams","save","deleteRecord","shopifySync","preventCrossShopDataAccess","finishBulkOperation","globalShopifySync","getBelongsToRelationParams","model","params","belongsToParams","field","Object","values","fields","fieldType","modelParams","apiIdentifier","undefined","belongsToParam","belongsToId","LINK_PARAM","id","data","getModelByApiIdentifier","baseRecord","GadgetRecord","__typename","graphqlTypeName","assign","record","getModelByTypename","context","maybeGetActionContextFromLocalStorage","api","assert","getRequestContext","Globals","modelValidator","key","validate","logger","internal","InternalError","result","createdAt","update","changedAttributes","create","writableAttributes","flushChanges","ChangeTracking","SinceLastPersisted","scope","delete","recordDeleted","getActionContextFromLocalStorage","effectAPIs","syncRecord","shopId","models","Array","isArray","every","m","sync","toString","syncSince","force","startReason","error","connectionSyncId","InvalidActionInputError","options","type","Error","appTenancy","AppTenancyKey","shopBelongsToField","shopify","String","ShopifyShopKey","PermissionDeniedError","fieldsIsBelongsToShopifyShop","filter","f","FieldType","BelongsTo","configuration","relatedModelKey","length","MisconfiguredActionError","relatedField","selectedField","find","input","isObjectLike","objectInput","value","getField","recordShopId","setField","warn","shopifyAPI","connections","forShopId","bulkOperation","graphql","ShopifyBulkOperationGIDForId","node","status","errorCode","toLowerCase","apiKeys","shopModelIdentifier","installedViaKeyFieldIdentifier","runShopSyncIdentifier","accessTokenIdentifier","forceFieldIdentifier","getSyncIdentifiers","pageSize","pageInfo","first","hasNextPage","results","records","findMany","in","state","inState","planName","notIn","after","endCursor","push","pagination","info","userVisible","isEmpty","created","response","mutate","domain","success","shop","errors","actionContextLocalStorage","getStore","requestContext","get","fieldsByApiIdentifier","keyBy","pickBy","v","k","internalWritable","changes","attributes","keys","reduce","attrs","typename","modelListIndex","availableApiIdentifiers","modelsMap","availableTypenames","ID","Number","Enum","RichText","DateTime","Email","URL","Money","File","Color","Password","Computed","HasManyThrough","HasMany","HasOne","Boolean","Model","JSON","Code","EncryptedString","Vector","Any","Null","RecordState","RoleAssignments","shopifyModelKey","modelName","modelKey","replaceAll"],"mappings":";;;;;;;;;;;;IA0BgBA,kBAAkB,MAAlBA;IAcAC,WAAW,MAAXA;IAmBMC,IAAI,MAAJA;IAkCAC,YAAY,MAAZA;IAmBAC,WAAW,MAAXA;IA4CAC,0BAA0B,MAA1BA;IAoGAC,mBAAmB,MAAnBA;IA2CAC,iBAAiB,MAAjBA;;;yBA1SuB;;;;;;wBAC2D;yBACrD;0BACT;yBACZ;uBAE+B;AAE7D,SAASC,2BAA2BC,KAAoB,EAAEC,MAA2B,EAAE;IACrF,MAAMC,kBAAuB,CAAC;IAE9B,KAAK,MAAMC,SAASC,OAAOC,MAAM,CAACL,MAAMM,MAAM,EAAY;QACxD,IAAIH,MAAMI,SAAS,IAAI,aAAa,QAAS;QAC7C,MAAMC,cAAc,OAAOP,MAAM,CAACD,MAAMS,aAAa,CAAC,KAAK,WAAWR,MAAM,CAACD,MAAMS,aAAa,CAAC,GAAGC,SAAS;QAC7G,MAAMC,iBACJH,eAAe,OAAOA,WAAW,CAACL,MAAMM,aAAa,CAAC,KAAK,WAAWD,WAAW,CAACL,MAAMM,aAAa,CAAC,GAAGC,SAAS;QACpH,MAAME,cAAcD,gBAAgB,CAACE,WAAW,KAAKH,YAAYC,cAAc,CAACE,WAAW,GAAGF,gBAAgBG,EAAE;QAChH,IAAIF,gBAAgBF,WAAW;YAC7BR,eAAe,CAAC,CAAC,EAAEC,MAAMM,aAAa,CAAC,EAAE,CAAC,CAAC,GAAGG;QAChD,CAAC;IACH;IAEA,OAAOV;AACT;AAEO,SAASX,mBAA0BkB,aAAqB,EAAEM,IAAW,EAAgD;IAC1H,MAAMf,QAAQgB,wBAAwBP;IACtC,MAAMQ,aAAa,IAAIC,CAAAA,gBAAW,cAAC,CAAC;QAClCC,YAAYnB,MAAMoB,eAAe;IACnC;IACA,OAAOhB,OAAOiB,MAAM,CAACJ,YAAYF;AACnC;AAQO,SAASvB,YAAYS,MAAiB,EAAEqB,MAAyB,EAAE;IACxE,MAAMtB,QAAQuB,mBAAmBD,OAAOH,UAAU;IAElD,yHAAyH;IACzH,uFAAuF;IACvFf,OAAOiB,MAAM,CAACC,QAAQrB,MAAM,CAACD,MAAMS,aAAa,CAAC,EAAEV,2BAA2BC,OAAOC;AACvF;AAaO,eAAeR,KAAK6B,MAAyB,EAAE;IACpD,MAAME,UAAUC;IAChB,MAAMC,MAAMC,IAAAA,aAAM,EAACH,UAAUA,QAAQE,GAAG,GAAGE,oBAAoBF,GAAG,EAAE;IACpE,MAAM1B,QAAQuB,mBAAmBD,OAAOH,UAAU;IAElD,MAAM,AAAC,CAAA,MAAMU,gBAAO,CAACC,cAAc,CAAC9B,MAAM+B,GAAG,CAAA,EAAGC,QAAQ,CAAC;QAAEN;QAAKO,QAAQJ,gBAAO,CAACI,MAAM;IAAC,GAAGX;IAE1F,IAAI,CAACI,IAAIQ,QAAQ,CAAClC,MAAMS,aAAa,CAAC,EAAE;QACtC,MAAM,IAAI0B,qBAAa,CACrB,CAAC,6DAA6D,EAAEnC,MAAMS,aAAa,CAAC,0FAA0F,CAAC,EAC/K;IACJ,CAAC;IAED,IAAI2B;IAEJ,IAAI,eAAed,UAAUA,OAAOe,SAAS,EAAE;QAC7CD,SAAS,MAAMV,IAAIQ,QAAQ,CAAClC,MAAMS,aAAa,CAAC,CAAC6B,MAAM,CAAChB,OAAOR,EAAE,EAAE;YACjE,CAACd,MAAMS,aAAa,CAAC,EAAE8B,kBAAkBvC,OAAOsB;QAClD;IACF,OAAO;QACLc,SAAS,MAAMV,IAAIQ,QAAQ,CAAClC,MAAMS,aAAa,CAAC,CAAC+B,MAAM,CAAC;YACtD,CAACxC,MAAMS,aAAa,CAAC,EAAEgC,mBAAmBzC,OAAOsB;QACnD;IACF,CAAC;IAEDlB,OAAOiB,MAAM,CAACC,QAAQ;QAAE,GAAGc,MAAM;IAAC;IAClCd,OAAOoB,YAAY,CAACC,+BAAc,CAACC,kBAAkB;AACvD;AAOO,eAAelD,aAAa4B,MAAyB,EAAE;IAC5D,MAAME,UAAUC;IAEhB,MAAMC,MAAMC,IAAAA,aAAM,EAACH,UAAUA,QAAQE,GAAG,GAAGE,oBAAoBF,GAAG,EAAE;IACpE,MAAMmB,QAAQrB,UAAUA,QAAQqB,KAAK,GAAG,CAAC,CAAC;IAC1C,MAAM7C,QAAQuB,mBAAmBD,OAAOH,UAAU;IAElD,MAAML,KAAKa,IAAAA,aAAM,EAACL,OAAOR,EAAE,EAAE,CAAC,oEAAoE,CAAC;IAEnG,IAAI,CAACY,IAAIQ,QAAQ,CAAClC,MAAMS,aAAa,CAAC,EAAE;QACtC,MAAM,IAAI0B,qBAAa,CACrB,CAAC,6DAA6D,EAAEnC,MAAMS,aAAa,CAAC,0FAA0F,CAAC,EAC/K;IACJ,CAAC;IAED,MAAMiB,IAAIQ,QAAQ,CAAClC,MAAMS,aAAa,CAAC,CAACqC,MAAM,CAAChC;IAC/C+B,MAAME,aAAa,GAAG,IAAI;AAC5B;AAEO,eAAepD,YAAYM,MAAiB,EAAEqB,MAAyB,EAAE;IAC9E,MAAME,UAAUwB;IAChB,MAAMC,aAAazB,QAAQyB,UAAU;IAErC,MAAMC,aAA4FvB,IAAAA,aAAM,EACtGL,QACA;IAGF,MAAM6B,SAASxB,IAAAA,aAAM,EAACuB,WAAWC,MAAM,EAAE;IAEzC,uDAAuD;IAEvD,IAAI,CAACD,WAAWE,MAAM,IAAKC,MAAMC,OAAO,CAACJ,WAAWE,MAAM,KAAKF,WAAWE,MAAM,CAACG,KAAK,CAAC,CAACC,IAAM,OAAOA,KAAK,WAAY;QACpH,IAAI;YACF,MAAMP,WAAWQ,IAAI,CACnBP,WAAWpC,EAAE,CAAC4C,QAAQ,IACtBP,QACAD,WAAWS,SAAS,EACpBT,WAAWE,MAAM,EACjBF,WAAWU,KAAK,EAChB3D,OAAO4D,WAAW;QAEtB,EAAE,OAAOC,OAAO;YACdjC,gBAAO,CAACI,MAAM,CAAC6B,KAAK,CAAC;gBAAEA;gBAAOC,kBAAkBb,WAAWpC,EAAE;YAAC,GAAG;YACjE,MAAMgD,MAAM;QACd;IACF,OAAO;QACL,MAAM,IAAIE,+BAAuB,CAAC,8CAA8C;IAClF,CAAC;AACH;AAcO,eAAepE,2BAA2BK,MAAiB,EAAEqB,MAAyB,EAAE2C,OAAwC,EAAE;IACvI,MAAMzC,UAAUwB;IAChB,IAAIxB,QAAQ0C,IAAI,IAAI,UAAU;QAC5B,MAAM,IAAIC,MAAM,oEAAoE;IACtF,CAAC;IACD,MAAMnE,QAAQwB,QAAQxB,KAAK;IAC3B,MAAMoE,aAAa5C,OAAO,CAAC6C,sBAAa,CAAC;IACzC,MAAMC,qBAAqBL,SAASK;IAEpC,uCAAuC;IACvC,IAAIF,YAAYG,SAASpB,WAAWzC,WAAW;QAC7C;IACF,CAAC;IAED,6EAA6E;IAC7E,IAAI,CAACV,OAAO;QACV;IACF,CAAC;IAED,MAAMmD,SAASqB,OAAOJ,WAAWG,OAAO,CAACpB,MAAM;IAE/C,0FAA0F;IAC1F,IAAInD,MAAM+B,GAAG,IAAI0C,gBAAgB;QAC/B,IAAInD,UAAUkD,OAAOlD,OAAOR,EAAE,MAAMqC,QAAQ;YAC1C,MAAM,IAAIuB,6BAAqB,GAAG;QACpC,CAAC;QACD;IACF,CAAC;IAED,MAAMC,+BAA+BvE,OAAOC,MAAM,CAACL,MAAMM,MAAM,EAAEsE,MAAM,CACrE,CAACC,IAAMA,EAAEtE,SAAS,KAAKuE,UAAUC,SAAS,IAAIF,EAAEG,aAAa,CAACC,eAAe,KAAKR;IAGpF,IAAIE,6BAA6BO,MAAM,KAAK,GAAG;QAC7C,MAAM,IAAIC,gCAAwB,CAAC,+CAA+C;IACpF,CAAC;IAED,IAAIR,6BAA6BO,MAAM,GAAG,KAAK,CAACZ,oBAAoB;QAClE,MAAM,IAAIa,gCAAwB,CAChC,gKACA;IACJ,CAAC;IAED,IAAIC,eAAeT,4BAA4B,CAAC,EAAE;IAElD,IAAIL,oBAAoB;QACtB,MAAMe,gBAAgBjF,OAAOC,MAAM,CAACL,MAAMM,MAAM,EAAEgF,IAAI,CAAC,CAACT,IAAMA,EAAEpE,aAAa,KAAK6D;QAClF,IAAI,CAACe,eAAe;YAClB,MAAM,IAAIF,gCAAwB,CAAC,oDAAoD;QACzF,CAAC;QAED,IAAIE,cAAc9E,SAAS,KAAKuE,UAAUC,SAAS,IAAIM,cAAcL,aAAa,CAACC,eAAe,KAAKR,gBAAgB;YACrH,MAAM,IAAIU,gCAAwB,CAChC,uGACA;QACJ,OAAO;YACLC,eAAeC;QACjB,CAAC;IACH,CAAC;IAED,MAAME,QAAQtF,MAAM,CAACD,MAAMS,aAAa,CAAC;IAEzC,qFAAqF;IACrF,IAAI+E,IAAAA,mBAAY,EAACD,QAAQ;QACvB,MAAME,cAAcF;QACpB,IAAIE,WAAW,CAACL,aAAa3E,aAAa,CAAC,EAAE;YAC3C,IAAI+D,OAAOiB,WAAW,CAACL,aAAa3E,aAAa,CAAC,CAACI,WAAW,MAAMsC,QAAQ;gBAC1E,MAAM,IAAIuB,6BAAqB,GAAG;YACpC,CAAC;QACH,OAAO;YACLe,WAAW,CAACL,aAAa3E,aAAa,CAAC,GAAG;gBACxC,CAACI,WAAW,EAAEsC;YAChB;QACF,CAAC;IACH,OAAO;QACLlD,MAAM,CAACD,MAAMS,aAAa,CAAC,GAAG;YAC5B,CAAC2E,aAAa3E,aAAa,CAAC,EAAE;gBAC5B,CAACI,WAAW,EAAEsC;YAChB;QACF;IACF,CAAC;IAED,IAAI7B,QAAQ;QACV,MAAMoE,QAAQpE,OAAOqE,QAAQ,CAACP,aAAa3E,aAAa;QAExD,kEAAkE;QAClE,IAAIiF,OAAO;YACT,MAAME,eAAe,OAAOF,UAAU,WAAWA,KAAK,CAAC7E,WAAW,GAAG6E,KAAK;YAC1E,IAAIlB,OAAOoB,kBAAkBzC,QAAQ;gBACnC,MAAM,IAAIuB,6BAAqB,GAAG;YACpC,CAAC;QACH,OAAO;YACL,kIAAkI;YAClIpD,OAAOuE,QAAQ,CAACT,aAAa3E,aAAa,EAAE;gBAC1C,CAACI,WAAW,EAAEsC;YAChB;QACF,CAAC;IACH,CAAC;AACH;AAEO,eAAetD,oBAAoByB,MAAyB,EAAE;IACnE,IAAI,CAACA,QAAQR,IAAI;QACfe,gBAAO,CAACI,MAAM,CAAC6D,IAAI,CAAC,CAAC,uDAAuD,CAAC;QAC7E;IACF,CAAC;IAED,MAAMtE,UAAUwB;IAChB,MAAM+C,aAAa,MAAM,AAACvE,QAAQwE,WAAW,CAAyBzB,OAAO,CAAC0B,SAAS,CAAC3E,OAAO6B,MAAM;IACrG,IAAI,CAAC4C,YAAY;QACflE,gBAAO,CAACI,MAAM,CAAC6B,KAAK,CAAC,CAAC,iDAAiD,EAAExC,OAAO6B,MAAM,CAAC,CAAC;QACxF;IACF,CAAC;IACD,MAAM+C,gBAAgB,AACpB,CAAA,MAAMH,WAAWI,OAAO,CAAC,CAAC;kBACZ,EAAEC,6BAA6B9E,OAAOR,EAAE,EAAE;;;;;;;;;;;;;;;OAerD,CAAC,CAAA,EACJuF,IAAI;IAEN,kEAAkE;IAClE,MAAM,EAAEC,OAAM,EAAEC,UAAS,EAAErC,KAAI,EAAE,GAAGgC;IACpC9F,OAAOiB,MAAM,CAACC,QAAQ;QACpB,GAAG4E,aAAa;QAChBI,QAAQA,QAAQE;QAChBD,WAAWA,WAAWC;QACtBtC,MAAMA,MAAMsC;QACZ1F,IAAIQ,OAAOR,EAAE;IACf;AACF;AAEO,eAAehB,kBAAkBG,MAMvC,EAAE;IACD,MAAMuB,UAAUC;IAChB,MAAMwB,aAAatB,IAAAA,aAAM,EACvBH,UAAUA,QAAQyB,UAAU,GAAGrB,oBAAoBqB,UAAU,EAC7D;IAEF,MAAMvB,MAAMC,IAAAA,aAAM,EAACH,UAAUA,QAAQE,GAAG,GAAGE,oBAAoBF,GAAG,EAAE;IAEpE,MAAM,EAAE+E,QAAO,EAAE9C,UAAS,EAAEP,OAAM,EAAEQ,MAAK,EAAEC,YAAW,EAAE,GAAG5D;IAE3D,MAAM,EAAEyG,oBAAmB,EAAEC,+BAA8B,EAAEC,sBAAqB,EAAEC,sBAAqB,EAAEC,qBAAoB,EAAE,GAC/H,MAAM7D,WAAW8D,kBAAkB;IAErC,MAAMC,WAAW;IACjB,IAAIC,WAAyE;QAAEC,OAAOF;QAAUG,aAAa,IAAI;IAAC;IAClH,MAAMC,UAA4F,EAAE;IAEpG,IAAIX,WAAWA,QAAQvB,MAAM,GAAG,GAAG;QACjC,IAAI;YACF,MAAO+B,SAASE,WAAW,CAAE;gBAC3B,MAAME,UAAU,MAAM3F,IAAIQ,QAAQ,CAACwE,oBAAoB,CAACY,QAAQ,CAAC;oBAC/D1C,QAAQ;wBACN,CAAC+B,+BAA+B,EAAE;4BAChCY,IAAId;wBACN;wBACAe,OAAO;4BACLC,SAAS;wBACX;wBACAC,UAAU;4BACRC,OAAO;gCAAC;gCAAU;gCAAc;6BAAY;wBAC9C;oBACF;oBACAT,OAAOD,SAASC,KAAK;oBACrBU,OAAOX,SAASY,SAAS;gBAC3B;gBACAT,QAAQU,IAAI,IAAIT;gBAChBJ,WAAWI,QAAQU,UAAU,CAACd,QAAQ;YACxC;QACF,EAAE,OAAOnD,OAAO;YACdjC,gBAAO,CAACI,MAAM,CAAC+F,IAAI,CAAC;gBAAEC,aAAa,IAAI;gBAAEnE;gBAAO2C;YAAQ,GAAG;YAC3D,MAAM3C,MAAM;QACd;QAEA,KAAK,MAAM1B,UAAUgF,QAAS;YAC5B,8EAA8E;YAC9E,IAAIc,IAAAA,cAAO,EAAC9F,MAAM,CAACyE,sBAAsB,KAAKzE,OAAOoF,KAAK,EAAEW,WAAW,eAAe;gBACpFtG,gBAAO,CAACI,MAAM,CAAC+F,IAAI,CAAC;oBAAE7E,QAAQf,OAAOtB,EAAE;gBAAC,GAAG;gBAC3C,QAAS;YACX,CAAC;YAED,IAAI;gBACF,MAAMsH,WAAW,MAAM1G,IAAI2G,MAAM,CAC/B,CAAC;sGAC2F,EACxFvB,uBAAuB,sBAAsB,EAAE,CAChD;cACC,EAAEF,sBAAsB;;;;gBAItB,EAAEE,uBAAuB,CAAC,EAAEA,qBAAqB,OAAO,CAAC,GAAG,EAAE,CAAC;;;;;;;;;;;UAWrE,CAAC,EACD;oBACE3D,QAAQf,OAAOtB,EAAE;oBACjBwH,QAAQlG,OAAOkG,MAAM;oBACrB3E;oBACAP;oBACA,GAAI0D,uBAAuB;wBAAElD;oBAAM,IAAIlD,SAAS;oBAChDmD;gBACF;gBAGF,4FAA4F;gBAC5F,IAAIuE,QAAQ,CAACxB,sBAAsB,IAAI,CAACwB,QAAQ,CAACxB,sBAAsB,CAAC2B,OAAO,EAAE;oBAC/E1G,gBAAO,CAACI,MAAM,CAAC6D,IAAI,CACjB;wBAAEmC,aAAa,IAAI;wBAAEO,MAAMpG;wBAAQ0B,OAAOsE,QAAQ,CAACxB,sBAAsB,CAAC6B,MAAM;oBAAC,GACjF;gBAEJ,CAAC;YACH,EAAE,OAAO3E,OAAO;gBACd,mEAAmE;gBACnEjC,gBAAO,CAACI,MAAM,CAAC6D,IAAI,CAAC;oBAAEmC,aAAa,IAAI;oBAAEnE;oBAAO0E,MAAMpG;gBAAO,GAAG;YAClE;QACF;IACF,OAAO;QACL,MAAM,IAAI4B,+BAAuB,CAAC,8BAA8B;IAClE,CAAC;AACH;AAEA;;CAEC,GAED;;CAEC,GACD,SAAShB,mCAAmC;IAC1C,OAAOrB,IAAAA,aAAM,EAAC+G,kCAAyB,CAACC,QAAQ,IAAI;AACtD;AAEA;;CAEC,GACD,SAASlH,wCAAwC;IAC/C,OAAOiH,kCAAyB,CAACC,QAAQ;AAC3C;AAEA,SAAS/G,oBAAoB;IAC3B,OAAOC,gBAAO,CAAC+G,cAAc,CAACC,GAAG,CAAC;AACpC;AAEA,MAAMhI,aAAa;AAEnB,SAAS4B,mBAAmBzC,KAAoB,EAAEsB,MAAgC,EAAE;IAClF,MAAMwH,wBAAwBC,IAAAA,YAAK,EAAC3I,OAAOC,MAAM,CAACL,MAAMM,MAAM,GAAoB;IAClF,OAAO0I,IAAAA,aAAM,EAAC1H,QAAQ,CAAC2H,GAAGC,IAAMJ,qBAAqB,CAACI,EAAE,EAAEC;AAC5D;AAEA,SAAS5G,kBAAkBvC,KAAoB,EAAEsB,MAAgC,EAAE;IACjF,MAAM8H,UAAU9H,OAAO8H,OAAO;IAC9B,MAAMC,aAAajJ,OAAOkJ,IAAI,CAACF,SAASG,MAAM,CAAC,CAACC,OAAOzH,MAAQ;QAC7DyH,KAAK,CAACzH,IAAI,GAAGT,MAAM,CAACS,IAAI;QACxB,OAAOyH;IACT,GAAG,CAAC;IACJ,OAAO/G,mBAAmBzC,OAAOqJ;AACnC;AAEA,MAAMrI,0BAA0B,CAACP,gBAAyC;IACxE,MAAMgJ,WAAWC,wBAAc,CAAC,CAAC,IAAI,EAAEjJ,cAAc,CAAC,CAAC;IACvD,IAAI,CAACgJ,UAAU;QACb,MAAM,IAAItH,qBAAa,CAAC,CAAC,MAAM,EAAE1B,cAAc,sCAAsC,CAAC,EAAE;YACtFkJ,yBAAyBvJ,OAAOkJ,IAAI,CAACI,wBAAc;QACrD,GAAG;IACL,CAAC;IAED,OAAOnI,mBAAmBkI;AAC5B;AAEA,MAAMlI,qBAAqB,CAACkI,WAAoC;IAC9D,IAAI,CAACA,UAAU;QACb,MAAM,IAAItH,qBAAa,CAAC,CAAC,gFAAgF,CAAC,EAAE;IAC9G,CAAC;IAED,MAAMnC,QAAQ4J,mBAAS,CAACH,SAAS;IACjC,IAAI,CAACzJ,OAAO;QACV,MAAM,IAAImC,qBAAa,CAAC,CAAC,oBAAoB,EAAEsH,SAAS,sCAAsC,CAAC,EAAE;YAC/FI,oBAAoBzJ,OAAOkJ,IAAI,CAACM,mBAAS;QAC3C,GAAG;IACL,CAAC;IAED,OAAO5J;AACT;IAEO;UAAK8E,SAAS;IAATA,UACVgF,QAAAA;IADUhF,UAEViF,YAAAA;IAFUjF,UAGVN,YAAAA;IAHUM,UAIVkF,UAAAA;IAJUlF,UAKVmF,cAAAA;IALUnF,UAMVoF,cAAAA;IANUpF,UAOVqF,WAAAA;IAPUrF,UAQVsF,SAAAA;IARUtF,UASVuF,WAAAA;IATUvF,UAUVwF,UAAAA;IAVUxF,UAWVyF,WAAAA;IAXUzF,UAYV0F,cAAAA;IAZU1F,UAaV2F,cAAAA;IAbU3F,UAcV4F,oBAAAA;IAdU5F,UAeVC,eAAAA;IAfUD,UAgBV6F,aAAAA;IAhBU7F,UAiBV8F,YAAAA;IAjBU9F,UAkBV+F,aAAAA;IAlBU/F,UAmBVgG,WAAAA;IAnBUhG,UAoBV1E,YAAAA;IApBU0E,UAqBVzB,WAAAA;IArBUyB,UAsBViG,UAAAA;IAtBUjG,UAuBVkG,UAAAA;IAvBUlG,UAwBVmG,qBAAAA;IAxBUnG,UAyBVoG,YAAAA;IAzBUpG,UA0BV;;;GAGC,GACDqG,SAAAA;IA9BUrG,UA+BVsG,UAAAA;IA/BUtG,UAgCVuG,iBAAAA;IAhCUvG,UAiCVwG,qBAAAA;GAjCUxG,cAAAA;AAoCZ,MAAMyG,kBAAkB,CAACC,YAAsB;IAC7C,MAAMC,WAAWD,UAAUE,UAAU,CAAC,KAAK;IAC3C,OAAO,CAAC,kBAAkB,EAAED,SAAS,CAAC;AACxC;AAEA,MAAMhH,iBAAiB8G,gBAAgB;AAEvC,MAAMnF,+BAA+B,CAACtF,KAAe,CAAC,4BAA4B,EAAEA,GAAG,CAAC"}